int is_white(const char c)
{
    char znak[] = {' ', '\t', '\n', '\0'};

    for (int i = 0; znak[i] != '\0'; ++i)
    {
        
            if (znak[i] == c)
            {
                return 1;
            }
        
    }  
    return 0;
}
void change_whites(char string [])
{
    char znak[] = {' ', '\t', '\0'};

    for (int i = 0; znak[i] != '\0'; i++)
    {
        for (int j = 0; string[j] != '\0'; j++)
        {
            if (znak[i] == string[j])
            {
                string[j] = '.';
            }
        }
    }     
}
int guess_eval(const int guess, const int my_number)
{
      if(guess == my_number){
		  return 1;
	  }
	  else if(guess > my_number){
		  return 0;
	  }
	  return 2;
}
int leap_year(const int year)
{
	if( 1 > year || year > 4443 ){
		return -1;
	}
	if ((year % 400 == 0 && year % 100 != 0) || (year % 4 == 0 && year % 100 != 0)) 
	{
		return 1;
	}
	return 0;
}
int count_positives(const int size, const int array[])
{
    int cislo = 0;
    for (int i = 0; i < size; i++)
    {
        if (array[i] > 0)
        {
            cislo++; 
        }
    }

    return cislo; 
}
int count_whites(const char string[])
{
    char znak[] = {' ', '\t', '\n', '\0'};
    int cislo = 0;
    for (int i = 0; znak[i] != '\0'; i++)
    {
        for (int j = 0; string[j] != '\0'; j++)
        {
            if (znak[i] == string[j])
            {
                cislo++;
            }
        }
    } 
    return cislo;
}
int direction_correction(const int degree)
{   
    int syma = degree;
    while(syma > 360)
    {
        syma -= 360;
    }
    if(syma == 0){
        return 0;
    }
    else if(syma == 90){
        return 90;
    }
    else if(syma == 180){
        return 180;
    }
    else if(syma == 270){
        return 270;
    }
    else if(syma == 360){
        return 0;
    }
    else if(syma < 0){
        return -1;
    }
    return 0;
}
int count_positives(const int size, const int array[])
{
    for (int i = 0; i < size; i++)
    {
        if (array[i] <= 0)
        {
            return 0;
        }   
    }
    return 1;
}
int last_positive(const int size, const int array[])
{   int max_positive = 0;
    for (int i = 0; i < size; i++)
    {
        if (array[i] > max_positive)
        {
            max_positive = array[i];
        }
    }
    if(max_positive == 0)
    {
        return -1;
    }
    return max_positive;   
}
int binary_num(const int num)
{
	if(num == 1 || num == 0)
	{
		return 1;
	}
	else if(num < 1000 && num > -1000)
	{
		return 0;
	}
	return -1;
}
void swap_sign(const int size, int array[])
{
    for (int i = 0; i < size; i++)
    {
        if (array[i] > 0)
        {
            array[i] = -array[i];
        }
        else if (array[i] < 0)
        {
            array[i] = -array[i];
        } }
}
int same_case(const char a, const char b)
{
    if(a >= 'a' && a <= 'z' && b >= 'a' && b <= 'z')
	{
		return 1;
	}
	if((a >= 'a' && a <= 'z' && b >= 'A' && b <= 'Z') || (a >= 'A' && a <= 'Z' && b >= 'a' && b <= 'z'))
	{
		return 0;
	}
	return -1;
	
}
int find_first_A(const char string[])
{   
    int abc = 0;
    for (int j = 0; string[j]; ++j)
    {
        if (('a' == string[j]) || ('A' == string[j]))
        {
            return abc;
        }
        abc++;
    }  
    return -1;
}
void string_to_upper(char string[])
{   
    for (int i = 0; string[i] != '\0'; i++)
    {
        if (string[i] >= 'a' && string[i] <= 'z')
        {
            string[i] = string[i] - 'a' + 'A';
        }
    }
}
